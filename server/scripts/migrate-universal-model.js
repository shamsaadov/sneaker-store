const db = require('../config/database');

async function migrateToUniversalModel() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É products - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
    const alterQueries = [
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
      `ALTER TABLE products ADD COLUMN product_type TEXT DEFAULT 'footwear' CHECK (product_type IN ('footwear', 'clothing', 'toys', 'accessories'))`,
      `ALTER TABLE products ADD COLUMN gender TEXT DEFAULT 'unisex' CHECK (gender IN ('men', 'women', 'kids', 'unisex'))`,
      `ALTER TABLE products ADD COLUMN color TEXT`,

      // JSON –ø–æ–ª—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
      `ALTER TABLE products ADD COLUMN footwear_attributes TEXT`, // JSON
      `ALTER TABLE products ADD COLUMN clothing_attributes TEXT`, // JSON
      `ALTER TABLE products ADD COLUMN toys_attributes TEXT`, // JSON
      `ALTER TABLE products ADD COLUMN accessories_attributes TEXT` // JSON
    ];

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω—É –∑–∞ –¥—Ä—É–≥–æ–π
    for (let i = 0; i < alterQueries.length; i++) {
      try {
        await db.query(alterQueries[i]);
        console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è ${i + 1}/${alterQueries.length}`);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "column already exists"
        if (error.message.includes('duplicate column name')) {
          console.log(`‚ö†Ô∏è  –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é ${i + 1}`);
        } else {
          throw error;
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É categories - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ product_type
    try {
      await db.query(`ALTER TABLE categories ADD COLUMN product_type TEXT DEFAULT 'footwear' CHECK (product_type IN ('footwear', 'clothing', 'toys', 'accessories'))`);
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ product_type –≤ categories');
    } catch (error) {
      if (error.message.includes('duplicate column name')) {
        console.log('‚ö†Ô∏è  –ü–æ–ª–µ product_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ categories');
      } else {
        throw error;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    const indexQueries = [
      'CREATE INDEX IF NOT EXISTS idx_products_product_type ON products(product_type)',
      'CREATE INDEX IF NOT EXISTS idx_products_gender ON products(gender)',
      'CREATE INDEX IF NOT EXISTS idx_products_color ON products(color)',
      'CREATE INDEX IF NOT EXISTS idx_categories_product_type ON categories(product_type)'
    ];

    for (const indexQuery of indexQueries) {
      await db.query(indexQuery);
    }
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    await seedUniversalProducts();

    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  }
}

async function seedUniversalProducts() {
  console.log('üå± –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
  const categories = [
    { id: 'cat-footwear', name: '–û–±—É–≤—å', slug: 'footwear', product_type: 'footwear', description: '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–±—É–≤—å' },
    { id: 'cat-clothing', name: '–û–¥–µ–∂–¥–∞', slug: 'clothing', product_type: 'clothing', description: '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞' },
    { id: 'cat-toys', name: '–ò–≥—Ä—É—à–∫–∏', slug: 'toys', product_type: 'toys', description: '–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—É—à–∫–∏' },
    { id: 'cat-accessories', name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', slug: 'accessories', product_type: 'accessories', description: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∏ –º–æ–¥–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã' }
  ];

  for (const category of categories) {
    try {
      await db.query(
        `INSERT OR REPLACE INTO categories (id, name, slug, description, product_type) VALUES (?, ?, ?, ?, ?)`,
        [category.id, category.name, category.slug, category.description, category.product_type]
      );
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.name}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${category.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
  const products = [
    // –û–±—É–≤—å
    {
      id: 'prod-nike-af1',
      name: 'Nike Air Force 1 \'07',
      brand: 'Nike',
      price: 8990,
      original_price: 12990,
      description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Force 1 —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º',
      images: JSON.stringify(['https://images.unsplash.com/photo-1549298916-b41d501d3772?w=500']),
      sizes: JSON.stringify([39, 40, 41, 42, 43, 44, 45]),
      category_id: 'cat-footwear',
      stock: 15,
      featured: 1,
      product_type: 'footwear',
      gender: 'unisex',
      color: '–±–µ–ª—ã–π',
      footwear_attributes: JSON.stringify({
        footwearType: 'sneakers',
        material: 'leather',
        season: 'all-season',
        closure: 'laces'
      })
    },
    // –û–¥–µ–∂–¥–∞
    {
      id: 'prod-nike-tshirt',
      name: 'Nike Dri-FIT T-Shirt',
      brand: 'Nike',
      price: 2500,
      original_price: 3200,
      description: '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π –≤–ª–∞–≥–æ–æ—Ç–≤–µ–¥–µ–Ω–∏—è',
      images: JSON.stringify(['https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=500']),
      sizes: JSON.stringify(['S', 'M', 'L', 'XL', 'XXL']),
      category_id: 'cat-clothing',
      stock: 25,
      featured: 1,
      product_type: 'clothing',
      gender: 'men',
      color: '—Å–∏–Ω–∏–π',
      clothing_attributes: JSON.stringify({
        clothingType: 't-shirt',
        material: 'polyester',
        season: 'summer',
        fit: 'regular',
        sleeveLength: 'short'
      })
    },
    // –ò–≥—Ä—É—à–∫–∏
    {
      id: 'prod-lego-city',
      name: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä LEGO City',
      brand: 'LEGO',
      price: 3500,
      description: '–ù–∞–±–æ—Ä –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ LEGO –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π',
      images: JSON.stringify(['https://images.unsplash.com/photo-1558060370-d644479df6ba?w=500']),
      sizes: JSON.stringify(['One Size']),
      category_id: 'cat-toys',
      stock: 30,
      featured: 1,
      product_type: 'toys',
      gender: 'kids',
      toys_attributes: JSON.stringify({
        toyType: 'building',
        ageGroup: '6-8',
        material: 'plastic',
        batteryRequired: false,
        assemblyRequired: true
      })
    },
    // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
    {
      id: 'prod-nike-bag',
      name: '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Å—É–º–∫–∞ Nike',
      brand: 'Nike',
      price: 4500,
      original_price: 5500,
      description: '–í–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Å—É–º–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
      images: JSON.stringify(['https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=500']),
      sizes: JSON.stringify(['One Size']),
      category_id: 'cat-accessories',
      stock: 15,
      featured: 1,
      product_type: 'accessories',
      gender: 'unisex',
      color: '—á–µ—Ä–Ω—ã–π',
      accessories_attributes: JSON.stringify({
        accessoryType: 'bag',
        material: 'synthetic',
        occasion: 'sport'
      })
    }
  ];

  for (const product of products) {
    try {
      await db.query(
        `INSERT OR REPLACE INTO products (
          id, name, brand, price, original_price, description, images, sizes,
          category_id, stock, featured, product_type, gender, color,
          footwear_attributes, clothing_attributes, toys_attributes, accessories_attributes
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          product.id, product.name, product.brand, product.price, product.original_price,
          product.description, product.images, product.sizes, product.category_id,
          product.stock, product.featured, product.product_type, product.gender, product.color,
          product.footwear_attributes || null,
          product.clothing_attributes || null,
          product.toys_attributes || null,
          product.accessories_attributes || null
        ]
      );
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: ${product.name}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –¢–æ–≤–∞—Ä ${product.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:`, error.message);
    }
  }

  console.log('üå± –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  db.init()
    .then(() => migrateToUniversalModel())
    .then(() => {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = { migrateToUniversalModel };
